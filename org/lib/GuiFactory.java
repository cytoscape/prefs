package org.lib;import java.awt.Component;import java.awt.Dimension;////import java.awt.Color;//import java.awt.Component;//import java.awt.Dimension;//import java.awt.Font;//import java.awt.event.ActionListener;//import java.awt.event.FocusAdapter;//import java.awt.event.FocusEvent;//import java.awt.event.KeyEvent;//import java.awt.event.MouseAdapter;//import java.awt.event.MouseEvent;////import javax.swing.AbstractButton;//import javax.swing.Action;//import javax.swing.Box;//import javax.swing.JButton;//import javax.swing.JCheckBox;//import javax.swing.JCheckBoxMenuItem;//import javax.swing.JComboBox;//import javax.swing.JLabel;//import javax.swing.JMenu;//import javax.swing.JMenuItem;//import javax.swing.JPanel;//import javax.swing.JScrollPane;//import javax.swing.JSlider;//import javax.swing.JSpinner;//import javax.swing.JSplitPane;//import javax.swing.JTextArea;//import javax.swing.JTextPane;//import javax.swing.ScrollPaneConstants;//import javax.swing.SpinnerModel;//import javax.swing.SpinnerNumberModel;//import javax.swing.SwingConstants;//import javax.swing.SwingUtilities;//import javax.swing.event.ChangeListener;//import javax.swing.text.JTextComponent;////public class GuiFactory {		public static final String IMAGE_DIR = "images";//	public static JLabel makeRLabel(String text)//	{//		JLabel l = new JLabel(text);//		l.setHorizontalAlignment(JLabel.RIGHT);//		return l;//	}//	public static JLabel makeLabel(String text, Dimension dimension)//	{//		JLabel label = new JLabel(text);//	    label.setHorizontalAlignment(SwingConstants.CENTER);//	    setSizes(label, dimension);//	    return label;//	}////	 //---------------------------------------------------------------------------------------------------------// //	 public static JLabel makeLabel(DictKey inKey, int x, int y, int w, int h, Font f, JPanel inParent)//	 { //		 return makeLabel(inKey.lookup(), x, y, w, h, f, inParent); //	 }//	 public static JLabel makeLabel(String inName, int x, int y, int w, int h, Font f, JPanel inParent)//	 { //		 JLabel lab = makeLabel(inName, new Dimension(w, h)); //, inParent);	//		 if (f != null) lab.setFont(f);//		 lab.setLocation(x, y);//		 if (inParent != null) inParent.add(lab);//		 return lab;//	 }//	 public static JLabel makeLabel(String text)//	 {//		 JLabel label = new JLabel();//		 label.setFont(FontManager.getRelativeFont(-1));	//TODO AM 10/18/12 use global font store here//		 return label;//	 }//	 //	 public static JTextPane makeHtmlLabelArea(String html)//	 {//		 JTextPane pane = new JTextPane();//		 pane.setContentType("text/html");//		 pane.setEditable(false);//		 pane.setText(html);//		 pane.setOpaque(false);//		 return pane;//	 }//	 //---------------------------------------------------------------------------------------------------------//	 //	 public static JTextArea makeLabelMultiLine(String key)	 //	 {//		 JLabel label = new JLabel();//		 JTextArea textArea = new JTextArea(key);//		 textArea.setEditable(false);//		 textArea.setFocusable(false);//		 textArea.setFont(label.getFont());//		 textArea.setForeground(label.getForeground());//		 textArea.setBackground(label.getBackground());//		 textArea.setLineWrap(true);//		 textArea.setWrapStyleWord(true);//		 return textArea;//	 }//	 //	 /** NOTE AM avoids issues of creating textareas like above method *///	 public static JLabel makeMultiLineLabel(DictKey key)//	 {//		 return makeMultiLineLabel(key.lookup());//	 }//	 //	 public static JLabel makeMultiLineLabel(String text)//	 {//		 String html = "<html>" + text.replace("\n", "<br/>") + "</html>";//		 return new JLabel(html);//	 }//	 //	 //---------------------------------------------------------------------------------------------------------//	  public static JCheckBox makeCheckBox(String key, Dimension d)	//	  {//		  return makeCheckBox(key, (Font) null, d);//	  }//	  public static JCheckBox makeCheckBox(String key, Font f, Dimension d)//	  {//		  JCheckBox cb = new JCheckBox(key); //		  if (d != null) setSizes(cb, d);//		  if (f != null) cb.setFont(f);//		  String tip = key + ".tooltip";//		  if(!(tip.endsWith(".tooltip")))//			  cb.setToolTipText(tip);	//		  return cb;//	  }//	  public static void installCheckBox(JCheckBox inCheck, String inAttr, SElement inElem)//	  {//		  if (inCheck == null || inElem == null) return;//	      installCheckBox(inCheck,inElem.getBool(inAttr));//	  }////	  public static void installCheckBox(JCheckBox inCheck, boolean state)	  {		if (inCheck == null) return;  inCheck.setSelected(state);	  }////	  public static void extractCheckBox(JCheckBox inCheck, String inAttr, SElement inElem)//	  {//		  if (inCheck != null && inElem != null)//			  inElem.setBool(inAttr, inCheck.isSelected());//	  }//	  //---------------------------------------------------------------------------------------------------------//	  public static JTextArea makeTextArea(final DictKey key)	  {	  return makeTextArea(key.getKeyString());	  }//	  public static JTextArea makeTextArea(final String msg)//	  {//		  final JTextArea area = new JTextArea(msg);//		  area.setLineWrap(true);//		  area.setWrapStyleWord(true);//		  area.setEditable(false);//		  area.setForeground(Color.black);//		  area.setBackground(mediumGray);//		  area.setFont(FontManager.getRelativeFont(-1));//		  return area;//	  }//	  //	  //	  //---------------------------------------------------------------------------------------------------------	  public static void setSizes(Component component, Dimension dim)	  {		  if (component == null) return;		  component.setSize(dim);		  component.setMaximumSize(dim);		  component.setMinimumSize(dim);		  component.setPreferredSize(dim);	  }	  //	  public static void setSizesEqualMaxPreferred(Component ... components)//	  {//		  Dimension max = new Dimension(0,0);//		  Dimension current;//		  for(int i=0; i<components.length; i++){//			  current = components[i].getPreferredSize();//			  if(max.height<current.height)//				  max.height=current.height;//			  if(max.width<current.width)//				  max.width=current.width;//		  }//		  for(int i=0; i<components.length; i++){//			  setSizes(components[i], max);//		  }//	  }//	  //	  public static void setSizesEqualHeight(Component ... components){//	    	int max = 0;//	    	int current;//	    	for(int i=0; i<components.length; i++){//	    		current = components[i].getHeight();//	    		if(max<current)//	    			max=current;//	    		//	    	}//	    	for(int i=0; i<components.length; i++){//	    		setSizes(components[i], new Dimension(components[i].getWidth(), max));//	    	}//	    }//	  //---------------------------------------------------------------------------//	  public static int findInPrefixOfComboBox(String s, JComboBox inBox)//	  {//		  int z = inBox.getModel().getSize();//		  for (int i = 0; i < z; i++) {//			  String item = inBox.getItemAt(i).toString();//			  if (s == null || s.length() == 0 || item.indexOf(s) == 0)//				  return i;//		  }//		  return -1;//	  }	//	public static JButton makeButton(final DictKey msg, final ActionListener listener)			//@Deprecated //	{//		return makeButton(msg.lookup(), listener);//	}//	//	public static JButton makeButton(final String msg, final ActionListener listener)//	{//		final JButton button = new JButton(msg);//		button.addActionListener(listener);//		return button;//	}//		//	public static void fixMnemonic(AbstractButton button){//		// to handle display of mnemonic in non-latin character sets (appended instead of underlined)//		// uses the first char to determine existence.//		String itemText = button.getText();//		if(button.getMnemonic()==0)//			return;//		String mnemonicText = KeyEvent.getKeyText(button.getMnemonic());//		boolean exists = false;//		for(int i=0;i<itemText.length();i++){//			if(mnemonicText.length()>1)//				break;//			if(itemText.toLowerCase().charAt(i)==mnemonicText.toLowerCase().charAt(0))//				exists=true;//		}//		if(!exists){//			button.setText(itemText+"("+mnemonicText+")");//			button.setDisplayedMnemonicIndex(itemText.length()+1);//		}//	}//////	@Deprecated////	public static JButton makeButton(final String msg, final String action, final ActionListener listener)////	{////		final JButton button = makeButton(msg, listener);////		button.setActionCommand(action);////		return button;////	}////	//	public static final Color mediumGray = new Color(216, 218, 216);	//	public static final Color panelGray	 = new Color(245, 246, 245);////----------------------------------------------------------------------------------------//	   //	public static JMenu makeMenu(DictKey key)//	{//		String text = key.lookup();//		JMenu menu = new JMenu(text);//		   //		try {//			int mnemonic = Integer.parseInt(new DictKey(key + ".mnemonic").lookup());//			menu.setMnemonic(mnemonic);		   //			fixMnemonic(menu);//		}//		catch (NumberFormatException e){return menu;}//		//		return menu;//	}////	//	public static JMenuItem makeItem(String name, ActionListener controller)//	{//		JMenuItem item = new JMenuItem(name);//	    item.setActionCommand(name);//	    item.addActionListener(controller);//	    return item;//	}//	public static JScrollPane makeVertScrollPane(Component c)//	{//        return new JScrollPane(c, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);//	}//	//	public static JScrollPane makeTransparentScrollPane(Component c)//	{//		JScrollPane pane = new JScrollPane(c);//		pane.setOpaque(false);//		pane.getViewport().setOpaque(false);//		pane.setBorder(null);//		return pane;//	}////	//	public static JButton makeHelpButton()//	{//		JButton btn = new JButton("HELP");//		if (HomeEnv.isMac())//		{//			btn.putClientProperty("JButton.buttonType", "help");//			btn.setText("");//		}//		return btn;//	}//	//	public static JSlider makeSlider(String id, int min, int max, int value, ChangeListener listener)		// TODO needs itemListener//    {//		JSlider slider = new JSlider(SwingConstants.HORIZONTAL);//		slider.setOpaque(false);//		slider.setMinimum(min);//		slider.setMaximum(max);//		slider.setName(id);//		slider.setValue(value);//		if (listener != null)		//			slider.addChangeListener(listener);//		return slider;//    }//	//	static public JCheckBoxMenuItem makeCheckboxItem(Action action)    {	return new JCheckBoxMenuItem(action);    }//	  private static ColorMenuButton makeColorMenuButton(final String actionName, ActionListener listener, int size, boolean useNoFill )	//    {//    	final ColorMenuButton button = new ColorMenuButton(useNoFill);//    	button.setName(actionName);//    	button.addActionListener(listener);//    	setSizes(button, new Dimension(size, size));//        return button;//    }//	//	public static Box makeHBox(Component...components) {//		Box box = Box.createHorizontalBox();//		for (Component c : components) if (c != null) box.add(c);//		return box;//	}//	//	public static Box makeVBox(Component...components) {//		Box box = Box.createVerticalBox();//		for (Component c : components) if (c != null) box.add(c);//		return box;//	}//////	public static DialogFooter makeStd5Footer(ActionListener listener, DictKey okstr)		//  Help Apply Save     OK Cancel////	{////		JButton help = makeButton(HelpItem, listener);////		JButton cancel = makeButton(Cancel, listener);////		JButton ok = makeButton( OK, listener);////		JButton apply = makeButton(Apply, listener);////		JButton save = makeButton(Save, listener);////		if(HomeEnv.isMac()) {////			help.putClientProperty("JButton.buttonType", "help");////			help.setText("");////			help.setActionCommand(HelpItem.toString());////		}////		JComponent[] left = new JComponent[] {help, save, apply};////		JComponent[] right = new JComponent[] {ok, cancel};////		return new DialogFooter(left, right, true, ok, false);////	}////		public static JSpinner makeNumberSpinner(double value, double min, double max, double step) //	{//		SpinnerModel model = new SpinnerNumberModel(value, min, max, step);//		JSpinner spinner = new JSpinner(model);//		JSpinner.NumberEditor editor = new JSpinner.NumberEditor(spinner);//		spinner.setEditor(editor);//		final JTextComponent text = editor.getTextField();//		final Runnable selector = new Runnable()	{	public void run() 	{	text.selectAll();	}	};//		text.addFocusListener(new FocusAdapter() {	@Override public void focusGained(FocusEvent e)		{	SwingUtilities.invokeLater(selector);	}	});//		text.addMouseListener(new MouseAdapter() {	@Override public void mouseReleased(MouseEvent e)	{	SwingUtilities.invokeLater(selector);}	});//		return spinner;//	}//	//	public static JSplitPane makeSplitPane(Component c1, Component c2, boolean vertical, int dividerLocation)//	{//		int orientation = vertical ? JSplitPane.VERTICAL_SPLIT : JSplitPane.HORIZONTAL_SPLIT;//		JSplitPane pane = new JSplitPane(orientation, c1, c2);		////		pane.setOneTouchExpandable(true);//		pane.setDividerLocation(dividerLocation);//		pane.setContinuousLayout(true);//		return pane;//	}//	//	public static JSplitPane makeVerticalSplitPane(Component c1, Component c2, int dividerLocation)//	{//		return makeSplitPane(c1, c2, true, dividerLocation);//	}//	//	public static JSplitPane makeHorizontalSplitPane(Component c1, Component c2, int dividerLocation)//	{//		return makeSplitPane(c1, c2, false, dividerLocation);//	}//	}